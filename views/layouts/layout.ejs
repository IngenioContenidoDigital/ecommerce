<!DOCTYPE html>
<html>
  <head>
    <title>Iridio</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
    <%/* <meta name="robots" content="noindex"> */%>


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->
    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <script src="/dependencies/moment-with-locales.js"></script>
    <script src="/dependencies/moment.js"></script>
    <script src="/dependencies/bulma-calendar/dist/js/bulma-calendar.min.js"></script>
    <script src="/dependencies/data-tables/simple-datatables.min.js"></script>
    <script src="/js/global.js"></script>
    <!--SCRIPTS END-->
    <script src="https://cdn.jsdelivr.net/npm/suneditor@2.28.0/dist/suneditor.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/suneditor@2.28.0/src/lang/es.js"></script>
    <!--STYLES-->
    <link rel="stylesheet" href="/dependencies/bulma-badge.min.css">
    <link rel="stylesheet" href="/dependencies/bulma-calendar/dist/css/bulma-calendar.min.css">
    <link rel="stylesheet" href="/dependencies/bulma-switch.min.css">
    <link rel="stylesheet" href="/dependencies/bulma.min.css">
    <link rel="stylesheet" href="/dependencies/data-tables/simple-datatables.min.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/suneditor@2.28.0/dist/css/suneditor.min.css">
    <link href='https://cdn.jsdelivr.net/npm/boxicons@2.0.5/css/boxicons.min.css' rel='stylesheet'>
  </head>
  <body>
    <div class="columns is-centered">
      <div class="column is-9">
        <%- partial('../partials/navbar.ejs') %>
      </div>
    </div>
    <div class="container"><%- body %></div>
  <script>
    
    const toogleMenu = (elm) => {
      let icon = elm.target.querySelector('span');
      if(hasClass(elm.target.nextSibling.nextSibling,'is-hidden')){
        removeClass(elm.target.nextSibling.nextSibling,'is-hidden');
        icon.innerHTML='<i class="bx bx-caret-down"></i>';
      }else{
        addClass(elm.target.nextSibling.nextSibling,'is-hidden');
        icon.innerHTML='<i class="bx bx-caret-left"></i>';
      }
    };

    const elements = document.querySelectorAll('.menu-label');
    elements.forEach((element) => {
      element.addEventListener('click', toogleMenu);
    });

    const socket = io.socket.on('addtocart', function (data){
        let cart = document.querySelector('#cart-button')
        cart.setAttribute('data-badge',data.items);
    });

  </script>


    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
        <footer class="footer">
            <p class="has-text-centered"><span class="is-x-small has-text-weight-bold">Nuestros medios de pago</span></p>
            <p class="has-text-centered">
              <img class="front-payment" src="/images/cod.webp" />
              <img class="front-payment" src="/images/visa.webp" />
              <img class="front-payment" src="/images/master.webp" />
              <img class="front-payment" src="/images/amex.webp" />
              <img class="front-payment" src="/images/diners.webp" />
              <img class="front-payment" src="/images/pse.webp" />
              <img class="front-payment" src="/images/baloto.webp" />
              <img class="front-payment" src="/images/efecty.webp" />
              <img class="front-payment" src="/images/gana.webp" />
            </p>
            <hr>
            <p class="has-text-centered">
              <span style="display:inline-block; vertical-align: middle; line-height: 58px;" class="is-x-small has-text-weight-bold has-text-centered">Compra segura</span>
              <img  style="display:inline-block; vertical-align: middle; line-height: 58px;" class="front-payment" src="/images/ssl.png" />
              <span style="display:inline-block; vertical-align: middle; line-height: 58px;" class="is-x-small has-text-centered">Sitio protegido con criptografia SSL</span>
            </p>
          </footer>
  </body>
</html>
