<!DOCTYPE html>
<html>
  <head>
    <%- partial('../partials/title.ejs') %>
    <%- partial('../partials/tag.ejs') %>

    <!-- Viewport mobile tag for sensible mobile support -->

    <%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
    <%/* <meta name="robots" content="noindex"> */%>


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->
    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <script src="/dependencies/moment-with-locales.js"></script>
    <script src="/dependencies/moment.js"></script>
    <script src="/js/global.js"></script>
    <!--SCRIPTS END-->
    <script src="https://cdn.jsdelivr.net/npm/bulma-calendar@6.0.9/dist/js/bulma-calendar.min.js"></script>
    <!--STYLES-->
    <link rel="stylesheet" href="/dependencies/bulma-switch.min.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
    <link href='https://cdn.jsdelivr.net/npm/boxicons@2.0.5/css/boxicons.min.css' rel='stylesheet'>
  </head>
  <body>

  <script>
   /* window.fbAsyncInit = function() {
      FB.init({
        appId      : '2898563873704023',
        cookie     : true,
        xfbml      : true,
        version    : 'v7.0'
      });
        
      FB.AppEvents.logPageView();   
        
    };

    (function(d, s, id){
      var js, fjs = d.getElementsByTagName(s)[0];
      if (d.getElementById(id)) {return;}
      js = d.createElement(s); js.id = id;
      js.src = "https://connect.facebook.net/es_CO/sdk.js";
      fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));*/
  </script>
    <div class="columns is-centered is-gapless">
      <div class="column">
          <ul class="is-size-7 has-background-grey-lighter is-flex-mobile is-fluid-tablet is-fluid-desktop is-centered has-text-centered">
            <li class="is-inline">&nbsp;<i class='bx bxs-truck'></i>&nbsp;Env√≠os a Toda Colombia&nbsp;</li>
            <li class="is-inline">&nbsp;<i class='bx bxs-credit-card' ></i>&nbsp;Todos los medios de pago&nbsp;</li>
            <%if(req.hostname==='iridio.co' || req.hostname==='localhost'){%>
            <li class="is-inline">&nbsp;<i class='bx bxl-whatsapp' ></i> +57 3153177477&nbsp;</li>
            <li class="is-inline">&nbsp;<i class='bx bxs-envelope'></i> contacto@iridio.co&nbsp;</li>
            <%}%>
          </ul>
        <%- partial('../partials/navbar.ejs') %>
      </div>
    </div>
    <div class="columns is-gapless">
      <div class="column">
         <%- body %>
      </div>
    </div>
  <script>
    
    const toogleMenu = (elm) => {
      let icon = elm.target.querySelector('span');
      if(hasClass(elm.target.nextSibling.nextSibling,'is-hidden')){
        removeClass(elm.target.nextSibling.nextSibling,'is-hidden');
        icon.innerHTML='<i class="bx bx-caret-down"></i>';
      }else{
        addClass(elm.target.nextSibling.nextSibling,'is-hidden');
        icon.innerHTML='<i class="bx bx-caret-left"></i>';
      }
    };

    const elements = document.querySelectorAll('.menu-label');
    elements.forEach((element) => {
      element.addEventListener('click', toogleMenu);
    });

    const socket = io.socket.on('addtocart', function (data){
        let cart = document.querySelector('#cart-button')
        cart.querySelector('.badge').innerHTML = data.items;
    });

    live('.dropdown, .button, .button > span','click', e=>{
        let elm = e.target;
        let parent = elm.closest('.dropdown');
        if(hasClass(parent.querySelector('.dropdown-menu'),'is-invisible')){
          removeClass(parent.querySelector('.dropdown-menu'),'is-invisible');
        }
        if(e.target.tagName==='I'){elm = e.target.parentNode.parentNode}
        if(e.target.tagName==='SPAN'){elm = e.target.parentNode}
        let node = elm.parentNode.parentNode;
        if(!hasClass(node,'is-active')){
            let id = elm.getAttribute('product');
            let content = elm.parentNode.parentNode.querySelector('.dropdown-content')
            if(content.children.length<1){
                io.socket.get('/findproductvariations/'+id,resData=>{
                    let o = document.createElement('a');
                    addClass(o,'dropdown-item');
                    addClass(o,'is-uppercase');
                    addClass(o,'is-size-7');
                    o.setAttribute('qty','0');
                    o.setAttribute('value','0');
                    o.text='Opciones';
                    content.prepend(o);
                    resData.forEach(op =>{
                        o = document.createElement('a');
                        addClass(o,'dropdown-item');
                        addClass(o,'is-uppercase');
                        addClass(o,'is-size-7');
                        o.setAttribute('qty',op.quantity);
                        o.setAttribute('value',op.id);
                        o.text=op.variation.name;
                        content.appendChild(o)
                    });
                });
            }
            addClass(node,'is-active');
        }else{
            removeClass(node,'is-active');
        }
    });

    /*live('.dropdown-content','mouseout',e=>{
          let node = e.target.parentNode.parentNode;
          removeClass(node,'is-active');
        });*/
    live('.dropdown-item','click',e=>{
        let option = e.target
        let elm = e.target.parentNode.parentNode.parentNode;
        let selected = elm.querySelector('#drop-selected');
        io.socket.post('/findprice',{variation:option.getAttribute('value')},(resData) => {
            if(resData.highPrice){elm.parentNode.querySelector('.highPrice').innerHTML = '$ '+Math.round(resData.highPrice).toLocaleString("es-CO");}
            if(resData.lowPrice){elm.parentNode.querySelector('.lowPrice').innerHTML = '$ '+Math.round(resData.lowPrice).toLocaleString("es-CO");}
            if(resData.savings){elm.parentNode.querySelector('.savings').innerHTML = '$ '+Math.round(resData.savings).toLocaleString("es-CO");}
            if(resData.price){
              let price = elm.parentNode.querySelector('.bestPrice');
              price.innerHTML = '$ '+Math.round(resData.price).toLocaleString("es-CO");
              price.setAttribute('data-price',Math.round(resData.price));
            }
        });

        selected.setAttribute('qty',option.getAttribute('qty') ? option.getAttribute('qty') : 0)
        selected.setAttribute('value',option.getAttribute('value'))
        selected.innerHTML=option.text;
        removeClass(elm,'is-active');
        let button = elm.parentNode.querySelector('#push-to-cart');
        if(selected.getAttribute('qty')>0){
            removeClass(button,'is-disabled');
            button.disabled=false;
            addClass(button,'is-primary');
        }else{
            removeClass(button,'is-primary');
            addClass(button,'is-disabled');
            button.disabled=true;
        }
        addClass(e.target.parentNode.parentNode,'is-invisible');
    });

    live('#push-to-cart','click',(e)=>{
      let vrt = e.target.parentNode.parentNode.querySelector('#drop-selected').getAttribute('value');
        io.socket.put('/cart',{variation:vrt,quantity:1,action:'create'},(resData)=>{
          dataLayer.push({ ecommerce: null });
          dataLayer.push({
              'event': 'addToCart',
              'ecommerce': {
                  'currencyCode': 'COP',
                  'add': {                                // 'add' actionFieldObject measures.
                  'products': [{                        //  adding a product to a shopping cart.
                    'name': card.querySelector('.name').innerHTML,                      // Name or ID is required.
                    'id': card.querySelector('.productid').innerHTML,
                    'price': card.querySelector('.bestPrice').getAttribute('data-price'),
                    'brand': card.querySelector('.brand').getAttribute('brand'),
                    'category': card.querySelector('.category').innerHTML,
                    'reference': card.querySelector('.sku').innerHTML,
                    'color': card.querySelector('.color').innerHTML,
                    'position': card.querySelector('.position').innerHTML,
                    'quantity': 1
                  }]
                  }
              }
          });
            window.location.href='/cart';
        });
    });

    </script>


    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
        <footer class="footer">
            <p class="has-text-centered"><span class="is-x-small has-text-weight-bold">Nuestros medios de pago</span></p>
            <p class="has-text-centered">
              <img class="front-payment" src="/images/cod.webp" />
              <img class="front-payment" src="/images/visa.webp" />
              <img class="front-payment" src="/images/master.webp" />
              <img class="front-payment" src="/images/amex.webp" />
              <img class="front-payment" src="/images/diners.webp" />
              <img class="front-payment" src="/images/pse.webp" />
              <img class="front-payment" src="/images/baloto.webp" />
              <img class="front-payment" src="/images/efecty.webp" />
              <img class="front-payment" src="/images/gana.webp" />
            </p>
            <hr>
            <p class="has-text-centered">
              <span style="display:inline-block; vertical-align: middle; line-height: 58px;" class="is-x-small has-text-weight-bold has-text-centered">Compra segura</span>
              <img  style="display:inline-block; vertical-align: middle; line-height: 58px;" class="front-payment" src="/images/ssl.png" />
              <span style="display:inline-block; vertical-align: middle; line-height: 58px;" class="is-x-small has-text-centered">Sitio protegido con criptografia SSL</span>
            </p>
            <br>
            <% if(req.hostname==='iridio.co' || req.hostname==='localhost'){%><p class="is-size-7 has-text-centered"><span><strong>Iridio</strong> 2020 - 2021. Es una marca registrada de Ingenio Contenido Digital SAS - NIT 900.521.885-1 CRA 15 No. 91 - 30 PISO 4 Bogot√° - Colombia - Tel: +57 315 3177477 | +57 1 742 4498</span></p><%}%>
            <p class="is-size-7 has-text-centered"><a href="/contenido/terminos-y-condiciones" target="_blank">T√©rminos y Condiciones</a>&nbsp;-&nbsp;<a href="/contenido/politica-de-datos" target="_blank">Pol√≠tica de Privacidad</a></p>
          </footer>
        </body>
</html>
