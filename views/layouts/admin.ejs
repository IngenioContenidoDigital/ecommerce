<!DOCTYPE html>
<html>
  <head>
    <title>1Ecommerce</title>
    <link rel="shortcut icon" type="image/png" href="1ecommerce.png"/>
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
    <meta name="robots" content="noindex">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->
    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <script src="/dependencies/moment-with-locales.js"></script>
    <script src="/dependencies/moment.js"></script>
    <script src="/js/global.js"></script>
    <!--SCRIPTS END-->
    <script src="https://cdn.jsdelivr.net/npm/suneditor@2.28.0/dist/suneditor.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/suneditor@2.28.0/src/lang/es.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/simple-datatables@2.1.13/dist/umd/simple-datatables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bulma-calendar@6.0.9/dist/js/bulma-calendar.min.js"></script>
    <!--STYLES-->
    <link rel="stylesheet" href="/dependencies/bulma-switch.min.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simple-datatables@2.1.13/dist/style.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/suneditor@2.28.0/dist/css/suneditor.min.css">
    <link href='https://cdn.jsdelivr.net/npm/boxicons@2.0.5/css/boxicons.min.css' rel='stylesheet'>
  </head>
  <body>
    <nav class="navbar" role="navigation" aria-label="main navigation">
      <div class="navbar-brand">
        <%if(req.hostname==='iridio.co'){%>
          <a class="navbar-item" href="/"><img src="<%=imgurl%>/iridio.png"></a>
        <%}else{%>
          <a class="navbar-item" href="/"><img src="/images/1ecommerce-logo.png"></a>
        <%}%>
        <a role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="navbarBasicExample">
          <span aria-hidden="true"></span>
          <span aria-hidden="true"></span>
          <span aria-hidden="true"></span>
        </a>
      </div>
      <div id="navbarBasicExample" class="navbar-menu">
      </div>
      <div class="navbar-end has-text-right">
        <div class="navbar-item is-inline-block">
            <div class="buttons">
              <%if(session.user.rights.name !== 'superadmin' && session.user.rights.name !== 'admin'){%>
                <a href="/channelmessages/<%=session.user.seller%>" id="notification-button" class="button">
                  <span title="Badge top right" class="badge"><%if(session.questions !== undefined ){%><%=session.questions%> <%}else{%>0<%}%></span>
                  <i class='is-size-4 bx bxs-bell-ring'></i>
                </a>
              <%}%>
              <a href="/cart" id="cart-button" class="button">
                <span title="Badge top right" class="badge"><%if(session.cart !== undefined ){%><%=session.cart.items%> <%}else{%>0<%}%></span>
                <i class='is-size-4 bx bxs-cart'></i>
              </a>
              <div class="dropdown is-right is-hoverable">
                <div class="dropdown-trigger">
                  <button id="account-menu" class="button" aria-haspopup="true" aria-controls="dropdown-menu4">
                    <% if(session.user === undefined) { %>
                      <span><i class="is-size-4 bx bxs-user"></i></span>
                    <%}else{%>
                      <span><i class='is-size-4 bx bxs-user-detail'></i></span>
                    <%}%>
                  </button>
                </div>
                <div class="dropdown-menu" id="dropdown-menu4" role="menu">
                  <div class="dropdown-content">
                    <% if(session.user === undefined) { %>
                    <a href="/login" id="login" class="dropdown-item">Iniciar Sesi칩n</a>
                    <% } else { %>
                    <a href="/account" class="dropdown-item">Mi Cuenta</a>
                    <a href="/addresses" class="dropdown-item">Direcciones</a>
                    <hr class="dropdown-divider">
                    <a href="/logout" class="dropdown-item">Cerrar Sesi칩n</a>
                    <% }%>
                  </div>
                </div>
              </div>
            </div>
        </div>
      </div>
  </nav>
    <div class="columns">      
      <div class="column is-2 container-menu">
        <div class="container">
          <%- partial('../partials/adminmenu.ejs') %>
        </div>
      </div>
      <div class="column is-10 container-body">
        <div class="container"><%- body %></div>
      </div>
    </div>
    <div class="modal">
      <div class="modal-background"></div>
      <div class="modal-content">
        <div class="box">
          <form method="POST" action="/login">
            <a class="link is-pulled-right" href="/register">Crear una cuenta</a>
            <div class="field">
              <label class="label">Email</label>
              <div class="control has-icons-left has-icons-right">
                <input class="input" name="emailAddress" type="email" placeholder="Ingresa Email" />
                <span class="icon is-small is-left">
                  <i class="bx bx-envelope"></i>
                </span>
              </div>
            </div>
            <div class="field">
              <label class="label">Contrase침a</label>
              <div class="control has-icons-left has-icons-right">
                <input class="input" name="password" type="password" placeholder="Contrase침a" autocomplete="off"/>
                <span class="icon is-small is-left">
                  <i class="bx bx-lock"></i>
                </span>
              </div>
            </div>
            <div class="field is-grouped">
                <div class="control">
                  <button id="enter" class="button is-primary">Entrar</button>
                </div>
                <div class="control">
                  <button id="cancel" class="button is-light">Cancelar</button>
                </div>
            </div>
          </form>
        </div>
      </div>
      <button class="modal-close is-large" aria-label="close"></button>
    </div>
  <script>
    live('#login','click',function(){
      const modal = document.querySelector('.modal');
      if(!hasClass(modal,'is-active'))
        addClass(modal,'is-active');

    });

    live('.modal-close','click',function(){modalClose();});
    live('#cancel','click',function(e){e.preventDefault(); modalClose();});
    
    const toogleMenu = (elm) => {
      let icon = elm.target.querySelector('span');
      if(hasClass(elm.target.nextSibling.nextSibling,'is-hidden')){
        removeClass(elm.target.nextSibling.nextSibling,'is-hidden');
        icon.innerHTML='<i class="bx bx-caret-down"></i>';
      }else{
        addClass(elm.target.nextSibling.nextSibling,'is-hidden');
        icon.innerHTML='<i class="bx bx-caret-left"></i>';
      }
    };

    const elements = document.querySelectorAll('.menu-label');
    elements.forEach((element) => {
      element.addEventListener('click', toogleMenu);
    });

    function modalClose(){
      const modal = document.querySelector('.modal');
      if (hasClass(modal,'is-active'))
        removeClass(modal,'is-active'); 
    }

    const socket = io.socket.on('addtocart', function (data){
        let cart = document.querySelector('#cart-button')
        cart.querySelector('.badge').innerHTML = data.items;
    });
    const socketNotification = io.socket.on('notificationml', function (data){
      let notification = document.querySelector('#notification-button')
      let user = <%- JSON.stringify(session.user) %>;
      if(user !== undefined && user.rights.name !== 'superadmin' && data.seller === user.seller){
        notification.querySelector('.badge').innerHTML = data.questionsSeller;
      }
    });
  </script>


    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
  </body>
</html>
