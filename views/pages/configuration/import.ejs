<div class="container">
    <% if (error != undefined || error != null) { %>
      <div class="notification is-danger is-light" id="error">
          <%= error %>
      </div>
    <% } %>
    <h4 class="title is-4">Importar Productos</h4>
    <hr>
    <div class="columns is-gapless">
        <div class="column">
            <div class="box">  
                <div id="tabs-with-content">
                    <div class="tabs is-centered">
                      <ul>
                        <li><a>CSV</a></li>
                        <li><a>INTEGRACIONES</a></li>
                      </ul>
                    </div>
                    <div>
                      <section class="tab-content">
                        <form action="/import" method="POST" enctype="multipart/form-data">
                        <div class="field">
                            <label class="label">Tipo de Importación</label>
                            <div class="select is-fullwidth">
                                <select name="entity" required>
                                    <option value="Product">Productos</option>
                                    <option value="ProductVariation">Variaciones de Producto</option>
                                    <option value="ProductImage">Imagenes de Producto</option>
                                </select>
                            </div>
                        </div>
                        <%if( rights== 'superadmin'){%>
                            <div class="field">
                              <label class="label">Sellers</label>
                              <div class="select is-fullwidth">
                                  <select name="seller" required>
                                    <% for(var i=0; i<sellers.length; i++) {%>
                                      <option value="<%=sellers[i].id%>"><%=sellers[i].name%></option>
                                    <% } %>
                                  </select>
                              </div>
                            </div>
                          <% } %>

                        <div class="field">
                            <div id="file-loader" class="file has-name is-fullwidth">
                            <label class="file-label">
                                <input class="file-input" required accept=".csv" type="file" id="file" name="file" />
                                <span class="file-cta">
                                <span class="file-icon">
                                    <i class="bx bx-upload"></i>
                                </span>
                                <span class="file-label">
                                    Archivo CSV
                                </span>
                                </span>
                                <span class="file-name has-text-grey">
                                Cargar Archivo a Procesar
                                </span>
                            </label>
                            </div>
                        </div> 
                        <div class="control buttons is-right">
                            <button id="process" type="submit" class="button is-primary"><i class="bx bx-plus-circle"></i>&nbsp;Importar Archivo</button>
                        </div>  
                        </form>
                      </section>
                      <section class="tab-content">
                        <% provider = null; %>
                        <%if(typeof integrations =='object' && integrations.length>0){%>
                            <% provider=integrations.filter(data => data.channel=='woocommerce' || data.channel=='shopify');%>
                            <% if(provider){%>
                              <form action="/import" method="POST" enctype="multipart/form-data">
                                <%if(sellers && sellers.length>0){%>
                                  <div class="field">
                                    <label class="label">Seller</label>
                                    <div class="select is-fullwidth">
                                        <select name="seller" required>
                                          <% sellers.forEach(s=>{%> {%>
                                            <option value="<%=s.id%>"><%=s.name%></option>
                                           <% }) %>
                                        </select>
                                    </div>
                                  </div>
                                  <% } %>
                                  <div class="field">
                                    <label class="label">Tipo de Importación</label>
                                    <div class="select is-fullwidth">
                                        <select name="importType" required>
                                            <option value="Product">Productos</option>
                                            <option value="Variations">Variaciones</option>
                                            <option value="ProductImage">Imagenes de Producto</option>
                                        </select>
                                    </div>
                                </div> 
                                  <div class="field">
                                      <div class="control">
                                        <label class="label">Proveedor</label>
                                        <input type="text" id="channelTxt" disabled class="input is-primary" type="text"  placeholder="Primary input" <%if(provider!==null){%>value="<%=provider.channel%>"<%}%> />
                                        <input type="hidden" name="channel" <%if(provider!==null){%>value="<%=provider.channel%>"<%}%>>
                                      </div>
                                  </div>
                                  <div class="field">
                                      <div class="control">
                                        <label class="label">Url</label>
                                        <input type="text" id="urlTxt" disabled class="input is-primary"  type="text" placeholder="Primary input" <%if(provider!==null){%>value="<%=provider.url%>"<%}%> />
                                        <input type="hidden" name="apiUrl" <%if(provider!==null){%>value="<%=provider.url%>"<%}%>>
                                      </div>
                                  </div>
                                  <div class="control buttons is-right">
                                      <input type="hidden" name="pk" <%if(provider!==null){%>value="<%=provider.key%>"<%}%>>
                                      <input type="hidden" name="sk" <%if(provider!==null){%>value="<%=provider.secret%>"<%}%>>
                                      <input type="hidden" name="version" <%if(provider!==null){%>value="<%=provider.version%>"<%}%>>
                                      <button id="process-from-provider" type="submit" class="button is-primary"><i class="bx bx-plus-circle"></i>&nbsp;Importar Productos</button>
                                  </div> 
                              </form>
                            <% }else{ %>
                              <div class="notification">
                                <button class="delete"></button>
                                Para realizar la importacion de catalogo de producto se debe configurar previamente
                                la plataforma de origen con sus respectivas <strong><a href="/sellers">credenciales del api</a>.</strong>  
                              </div>
                            <%}%>
                        <%}else {%> 
                          <div class="notification">
                            <button class="delete"></button>
                            Para realizar la importacion de catalogo de producto se debe configurar previamente
                            la plataforma de origen con sus respectivas <strong><a href="/sellers">credenciales del api</a>.</strong>  
                          </div>
                        <%}%>
                      </section>
                    </div>
                  </div>
                <br>
            </div>
        </div>
        <div class="column">
            <div class="loading"></div>
            <div id="report" class="container is-fluid is-hidden">
                <br>
                <h6 class="title is-6">Espera un momento....</h6>
                <hr>
                <div id="loading-block" class="notification is-hidden">
                  <i class="fas fa-sync fa-spin"></i>
                   Estamos sincronizando el catalogo...
                   <progress class="progress is-small is-primary" max="100">15%</progress>
                </div>
                <div id="success-block" class="notification is-primary is-hidden">
                    Se han procesado un total <span id="items">0</span> de registros.
                </div>
                <div id="error-block" class="notification is-danger is-hidden">
                    <p>Hemos identificado <span id="errors">0</span> error(es).</p>
                    <br>
                    <div class="container is-fluid">
                        <ol id="error-list">

                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
  </div>
  <script>
    function showReportPane(){
      if(hasClass(report,'is-hidden')){removeClass(report,'is-hidden');}
      let loadingBlock = document.querySelector('#loading-block');
      addClass(loadingBlock, 'is-hidden');
      let successBlock = document.querySelector('#success-block');
      let errorBlock = document.querySelector('#error-block');
      if(hasClass(successBlock,'is-hidden')){removeClass(successBlock, 'is-hidden');}
      if(hasClass(errorBlock,'is-hidden')){removeClass(errorBlock, 'is-hidden');}
    }
    <% if(typeof pagination ==='object' && pagination!== null ){ %>
        let args = <%- JSON.stringify(credentials)%>;
        let seller = '<%= seller %>';
        let importType = '<%= importType %>';

        let processed = 1;
        args.page = 1;
        args.pageSize  = 50;
        args.seller = seller
        
        let paginationData =<%- JSON.stringify(pagination)%>;
        let pages = paginationData.pagesCount;
        let totalItemsData =  paginationData.data.length;
        let total = paginationData.totalRecords;
        let start = false;

        let report = document.querySelector('#report');
        if(hasClass(report,'is-hidden')){removeClass(report,'is-hidden');}

        if(paginationData){
          let loadingBlock = document.querySelector('#loading-block');
          if(hasClass(loadingBlock,'is-hidden')){removeClass(loadingBlock,'is-hidden');}
        }

        io.socket.on("product_processed", (resData)=>{
          showReportPane();
          if(!start){
            start = true;
          }

          if(resData.result.length>=1){
              let items = document.querySelector('#items');
              items.innerHTML=parseInt(items.innerHTML)+1;
            }
            if(resData.errors.length>=1){
              let errors = document.querySelector('#errors')
              errors.innerHTML=parseInt(errors.innerHTML)+1;
              let errorlist = document.querySelector('#error-list');
              let err = document.createElement('li');
              err.innerHTML=resData.errors[0].message;
              errorlist.appendChild(err);
            }
            if(processed>=total){
              let mensaje = document.querySelector('#report > .title');
              mensaje.innerHTML='Proceso Finalizado';
            }else{
              processed+=1;
            }
        });

        io.socket.on("variation_processed", (resData)=>{
          showReportPane();
          
          if(!start){
            start = true;
          }

          if(resData.result.length>=1){
              let items = document.querySelector('#items');
              items.innerHTML=parseInt(items.innerHTML)+1;
            }
            
            if(resData.errors.length>=1){
              let errors = document.querySelector('#errors')
              errors.innerHTML=parseInt(errors.innerHTML)+1;
              let errorlist = document.querySelector('#error-list');
              let err = document.createElement('li');
              err.innerHTML=resData.errors[0].message;
              errorlist.appendChild(err);
            }
            if(processed>=total){
              let mensaje = document.querySelector('#report > .title');
              mensaje.innerHTML='Proceso Finalizado';
            }else{
              processed+=1;
            }
        });

        io.socket.on("product_images_processed", (resData)=>{
          showReportPane();

          if(!start){
            start = true;
          }

          if(resData.result && resData.result.length>=1){
              let items = document.querySelector('#items');
              items.innerHTML=parseInt(items.innerHTML)+1;
            }
            if(resData.errors && resData.errors.length>=1){
              console.log("ERROR", resData.errors[0].message);
              let errors = document.querySelector('#errors')
              errors.innerHTML=parseInt(errors.innerHTML)+1;
              let errorlist = document.querySelector('#error-list');
              let err = document.createElement('li');
              err.innerHTML=resData.errors[0].message;
              errorlist.appendChild(err);
            }
            if(processed>=total){
              let mensaje = document.querySelector('#report > .title');
              mensaje.innerHTML='Proceso Finalizado';
            }else{
              processed+=1;
            }
        });

        switch (importType) {
          case 'Product':
                io.socket.post('/import-products', args, (response)=>{
                  console.log("response", response);
                });
            break;
            case 'ProductImage':
                io.socket.post('/import-images', args, (response)=>{
                  console.log("response", response);
                });
            break;
            case 'Variations':
                io.socket.post('/import-variations', args, (response)=>{
                  console.log("response", response);
                });
            break;
          default:
            break;
        }

    <% } %>

    <% if(resultados!==null){ %>
      let records = <%- JSON.stringify(resultados)%>;
      let type = '<%= type %>';
      let seller = '<%= seller %>';
      let totalrecords = records.length;
      let processed = 1;
      let report = document.querySelector('#report');
      if(hasClass(report,'is-hidden')){removeClass(report,'is-hidden');}
      for(let p of records){  
        io.socket.post('/productcheck',{type:type,product:p,seller:seller},resData =>{
            showReportPane();
            if(resData.items.length>=1){
              let items = document.querySelector('#items');
              items.innerHTML=parseInt(items.innerHTML)+1;
            }
            if(resData.errors.length>=1){
              let errors = document.querySelector('#errors')
              errors.innerHTML=parseInt(errors.innerHTML)+1;
              let errorlist = document.querySelector('#error-list');
              let err = document.createElement('li');
              err.innerHTML=resData.errors[0];
              errorlist.appendChild(err);
            }
            if(processed>=totalrecords){
              let mensaje = document.querySelector('#report > .title');
              mensaje.innerHTML='Proceso Finalizado';
            }else{
              processed+=1;
            }
        });
      }
      document.querySelector('.loading').innerHTML='';
    <%}%>

    function setSellerInfo (){
      var provider = <%- JSON.stringify(provider) %>;
      document.getElementById("channelTxt").value = provider[0].channel;
      document.getElementById("urlTxt").value = provider[0].url;
      document.getElementsByName("pk")[0].value = provider[0].key;
      document.getElementsByName("sk")[0].value = provider[0].secret;
      document.getElementsByName("apiUrl")[0].value = provider[0].url;
      document.getElementsByName("version")[0].value = provider[0].version;
      document.getElementsByName("channel")[0].value = provider[0].channel;
  }
    const fileInput = document.querySelector('#file-loader input[type=file]');
    fileInput.onchange = () => {
    if (fileInput.files.length > 0) {
        const fileName = document.querySelector('#file-loader .file-name');
        fileName.textContent = fileInput.files[0].name;
    }
    };
    live('#process','click',e=>{
        let report = document.querySelector('#report');
        addClass(report,'is-hidden');
        
        let box = document.querySelector('.box').parentNode;
        addClass(box,'is-hidden');
        document.querySelector('.loading').innerHTML='<br><p>Por favor espera, estamos procesando el archivo. Tomará unos minutos.</p><br><progress class="progress is-small is-primary" max="100">15%</progress>';
    });

    live('#process-from-provider','click',e=>{
        let box = document.querySelector('.box').parentNode;
        let report = document.querySelector('#report');
        addClass(report,'is-hidden');
        addClass(box,'is-hidden');
        
        document.querySelector('.loading').innerHTML='<br><p>Por favor espera, estamos procesando la importación. Tomará unos minutos.</p><br><progress class="progress is-small is-primary" max="100">15%</progress>';
    });

    live('select[name="entity"]','change',e=>{
        let elm = document.querySelector('#file');
        if(e.target.value==='ProductImage'){
            elm.setAttribute('accept','image/*');
            elm.setAttribute('multiple','multiple');
            document.querySelector('span .file-label').innerHTML='Imagenes a Procesar'
            document.querySelector('.file-name').innerHTML='Cargar Varias Imagenes'
        }else{
            elm.setAttribute('accept','.csv');
            elm.removeAttribute('multiple');
            document.querySelector('span .file-label').innerHTML='Archivo .CSV'
            document.querySelector('.file-name').innerHTML='Cargar Archivo .csv a procesar'
        }
    })

    live('select[name="seller"]','change',e=>{
      var providers = <%- JSON.stringify(provider) %>;

      let selected = providers.filter(function(p){
        return p.seller === e.target.value;
      })[0];
      
      document.getElementById("channelTxt").value = selected.channel;
      document.getElementById("urlTxt").value = selected.url;

      document.getElementsByName("pk")[0].value = selected.key;
      document.getElementsByName("sk")[0].value = selected.secret;
      document.getElementsByName("apiUrl")[0].value = selected.url;
      document.getElementsByName("version")[0].value = selected.version;
      document.getElementsByName("channel")[0].value = selected.channel;
    });

    document.addEventListener("DOMContentLoaded", function(event) {
        let tabsWithContent = (function () {
  let tabs = document.querySelectorAll('.tabs li');
  let tabsContent = document.querySelectorAll('.tab-content');

  let deactvateAllTabs = function () {
    tabs.forEach(function (tab) {
      tab.classList.remove('is-active');
    });
  };

  let hideTabsContent = function () {
    tabsContent.forEach(function (tabContent) {
      tabContent.classList.remove('is-active');
    });
  };

  let activateTabsContent = function (tab) {
    tabsContent[getIndex(tab)].classList.add('is-active');
  };

  let getIndex = function (el) {
    return [...el.parentElement.children].indexOf(el);
  };

  tabs.forEach(function (tab) {
    tab.addEventListener('click', function () {
      deactvateAllTabs();
      hideTabsContent();
      tab.classList.add('is-active');
      activateTabsContent(tab);
    });
  })

  tabs[0].click();
})();

setSellerInfo();


});

  </script>