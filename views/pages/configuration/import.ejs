<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.0/FileSaver.min.js"></script>
<div class="container">
	<% if (error != undefined || error != null) { %>
		<div class="notification is-danger is-light" id="error">
			<%= error %>
		</div>
	<% } %>

	<h4 class="title is-4">Importar Productos</h4>
	<div class="notification is-danger is-light is-hidden" id="error-from-cms">
		
	</div>
	<hr>
	<div class="columns is-gapless">
		<div class="column">
			<div class="box">  
				<div id="tabs-with-content">
					<div class="tabs is-centered">
						<ul>
							<li><a>EXCEL</a></li>
							<li><a>INTEGRACIONES</a></li>
						</ul>
					</div>
					<div>
						<section class="tab-content">
              <form action="/import" method="POST" enctype="multipart/form-data">
                <input type="hidden" name="seller" value="" />
								<div class="field">
									<label class="label">Tipo de Importaci贸n</label>
									<div class="select is-fullwidth">
										<select name="entity" required>
											<option value="">--Seleccione--</option>
											<option value="Product">Productos</option>
											<option value="ProductVariation">Variaciones de Producto</option>
											<option value="ProductImage">Imagenes de Producto</option>
											<option value="Discount">Descuentos</option>
										</select>
									</div>
								</div>
								<div class="field">
									<div id="file-loader" class="file has-name is-fullwidth">
										<label class="file-label">
											<input class="file-input" required accept=".xlsx, .xls" type="file" id="file" name="file" />
											<span class="file-cta">
												<span class="file-icon">
													<i class="bx bx-upload"></i>
												</span>
												<span class="file-label">
													Archivo Excel
												</span>
											</span>
											<span class="file-name has-text-grey">
												Cargar Archivo a Procesar
											</span>
										</label>
									</div>
								</div>
								<div class="notification is-hidden" id="container-info">
								</div>
								<div class="control buttons is-right">
									<button id="process" type="submit" class="button is-primary"><i class="bx bx-plus-circle"></i>&nbsp;Importar Archivo</button>
								</div>  
							</form>
						</section>
						
						<section class="tab-content">
							<% provider = null; %>
							<%if(typeof integrations =='object' && integrations.length>0){%>
								<% provider=integrations.filter(data => data.channel.type === 'cms');%>
								<% if(provider.length > 0){%>
										<div class="field">
											<label class="label">Tipo de Importaci贸n</label>
											<div class="select is-fullwidth">
												<select name="importType" required>
													<option value="Product">Productos</option>
													<option value="Variations">Variaciones</option>
													<option value="ProductImage">Imagenes de Producto</option>
												</select>
											</div>
										</div>
										<div id="fieldDiscount" class="field is-hidden">
											<div class="control">
												<label class="label">Importar Descuentos</label>
												<input id="discount" type="checkbox" name="discount" class="switch is-success">
												<label for="discount"></label>
											</div>
                    					</div>
										<div id="fieldColor" class="field">
											<div class="control">
												<label class="label">Crear productos a partir de colores.</label>
												<input id="color" type="checkbox" name="color" class="switch is-success">
												<label for="color"></label>
											</div>
                    					</div>
										<div class="field">
											<div class="control">
												<label class="label">Proveedor</label>
												<input type="text" id="channelTxt" disabled class="input is-primary" type="text"  placeholder="Proveedor" <%if(provider!==null){%>value="<%=provider[0].channel.name%>"<%}%> />
												<input type="hidden" name="channel" <%if(provider!==null){%>value="<%=provider[0].channel.name%>"<%}%>>
											</div>
										</div>
										<div class="field">
											<div class="control">
												<label class="label">Url</label>
												<input type="text" id="urlTxt" disabled class="input is-primary"  type="text" placeholder="URL" <%if(provider!==null){%>value="<%=provider.url%>"<%}%> />
												<input type="hidden" name="apiUrl" <%if(provider!==null){%>value="<%=provider.url%>"<%}%>>
											</div>
										</div>
										<div class="control buttons is-right">
											<input type="hidden" name="pk" <%if(provider!==null){%>value="<%=provider.key%>"<%}%>>
											<input type="hidden" name="sk" <%if(provider!==null){%>value="<%=provider.secret%>"<%}%>>
											<input type="hidden" name="version" <%if(provider!==null){%>value="<%=provider.version%>"<%}%>>
											<button id="process-from-provider" class="button is-primary"><i class="bx bx-plus-circle"></i>&nbsp;Importar Productos</button>
										</div>
								<% }else{ %>
									<div class="notification">
										<button class="delete"></button>
										Para realizar la importaci贸n de catalogo de producto se debe configurar previamente
										la plataforma de origen con sus respectivas <strong><a href="/sellers">credenciales del api</a>.</strong>  
									</div>
								<%}%>
							<%}else {%> 
								<div class="notification">
									<button class="delete"></button>
									Para realizar la importaci贸n de catalogo de producto se debe configurar previamente
									la plataforma de origen con sus respectivas <strong><a href="/sellers">credenciales del api</a>.</strong>  
								</div>
							<%}%>
						</section>
					</div>
				</div>
				<br>
			</div>
		</div>
		<div class="column">
			<div class="loading"></div>
			<div id="divreport">
				
			</div>
		</div>
	</div>
</div>
<script>
	<%if(seller !== null){%>
    const seller = '<%- seller %>';
		const providers = <%- JSON.stringify(provider) %>;
    document.querySelector('input[name="seller"]').value = seller;
		if (providers && providers.length > 0) {
			let selected = providers.filter(function(p){
				return p.seller === seller;
			})[0];
			document.getElementById("channelTxt").value = selected.channel.name;
			document.getElementById("urlTxt").value = selected.url;
			document.getElementsByName("pk")[0].value = selected.key;
			document.getElementsByName("sk")[0].value = selected.secret;
			document.getElementsByName("apiUrl")[0].value = selected.url;
			document.getElementsByName("version")[0].value = selected.version;
			document.getElementsByName("channel")[0].value = selected.channel.name;
		}
	<%}%>

	io.socket.on("product_processed", (resData)=>{
		showReportPane();
		if(resData.result.length>=1){
			let items = document.querySelector('#items');
			items.innerHTML=parseInt(items.innerHTML)+1;
		}
		if(resData.errors.length>=1){
			let errors = document.querySelector('#errors')
			errors.innerHTML=parseInt(errors.innerHTML)+1;
			let errorlist = document.querySelector('#error-list');
			let err = document.createElement('li');
			err.innerHTML=resData.errors[0].message;
			errorlist.appendChild(err);
		}
	});

	io.socket.on("variation_processed", (resData)=>{
		showReportPane();
		if(resData.result.length>=1){
			let items = document.querySelector('#items');
			items.innerHTML=parseInt(items.innerHTML)+1;
		}
		if(resData.errors.length>=1){
			let errors = document.querySelector('#errors')
			errors.innerHTML=parseInt(errors.innerHTML)+1;
			let errorlist = document.querySelector('#error-list');
			let err = document.createElement('li');
			err.innerHTML=resData.errors[0].message;
			errorlist.appendChild(err);
		}
	});

	io.socket.on("product_images_processed", (resData)=>{
		showReportPane();
		if(resData.result && resData.result.length>=1){
			let items = document.querySelector('#items');
			items.innerHTML=parseInt(items.innerHTML)+1;
		}
		if(resData.errors && resData.errors.length>=1){
			let errors = document.querySelector('#errors')
			errors.innerHTML=parseInt(errors.innerHTML)+1;
			let errorlist = document.querySelector('#error-list');
			let err = document.createElement('li');
			err.innerHTML=resData.errors[0].message;
			errorlist.appendChild(err);
		}
	});

	io.socket.on("product_task_ended", (resData)=>{
		let mensaje = document.querySelector('#report > .title');
		mensaje.innerHTML='Proceso Finalizado';
	});

	io.socket.on("image_task_ended", (resData)=>{
		let mensaje = document.querySelector('#report > .title');
		mensaje.innerHTML='Proceso Finalizado';
	});

	io.socket.on("variation_task_ended", (resData)=>{
		let mensaje = document.querySelector('#report > .title');
		mensaje.innerHTML='Proceso Finalizado';
	});

  <% if(typeof resultados ==='object' && resultados!==null && resultados.length>0){ %>
    let records = <%- JSON.stringify(resultados) %>;
    let type = '<%= type %>';
    let sell = '<%= seller %>';
    let totalrecords = records.length;
    let processed = 1;
    addDivReport();
    let report = document.querySelector('#report');
    if(hasClass(report,'is-hidden')){removeClass(report,'is-hidden');}
    for(let p of records){  
      io.socket.post('/productcheck',{type:type,product:p,seller:sell},resData =>{
          showReportPane();
          if(resData.items.length>=1){
            let items = document.querySelector('#items');
            items.innerHTML=parseInt(items.innerHTML)+1;
          }
          if(resData.errors.length>=1){
            let errors = document.querySelector('#errors')
            errors.innerHTML=parseInt(errors.innerHTML)+1;
            let errorlist = document.querySelector('#error-list');
            let err = document.createElement('li');
            err.innerHTML=resData.errors[0];
            errorlist.appendChild(err);
          }
          if(processed>=totalrecords){
            let mensaje = document.querySelector('#report > .title');
            mensaje.innerHTML='Proceso Finalizado';
          }else{
            processed+=1;
          }
      });
    }
    document.querySelector('.loading').innerHTML='';
  <%}%>

	function showReportPane(){
		let loadingBlock = document.querySelector('#loading-block');
		addClass(loadingBlock, 'is-hidden');
		let successBlock = document.querySelector('#success-block');
		let errorBlock = document.querySelector('#error-block');
		if(hasClass(successBlock,'is-hidden')){removeClass(successBlock, 'is-hidden');}
		if(hasClass(errorBlock,'is-hidden')){removeClass(errorBlock, 'is-hidden');}
	}

	function responseIntegration(credentials, seller, importType, pageSize, discount, asColor, pagination) {
		if(typeof pagination ==='object' && pagination!== null ){
			let args = credentials
			args.page = 1;
			args.pageSize = pageSize;
			args.seller = seller;
      		args.discount = discount;
      		args.asColor = asColor;
			let report = document.querySelector('#report');
			if(hasClass(report,'is-hidden')){removeClass(report,'is-hidden');}
	
			if(pagination){
				let loadingBlock = document.querySelector('#loading-block');
				if(hasClass(loadingBlock,'is-hidden')){removeClass(loadingBlock,'is-hidden');}
			}

			switch (importType) {
				case 'Product':
					io.socket.post('/import-products', args, (response)=>{
						console.log("response", response);
					});
					break;
				case 'ProductImage':
					io.socket.post('/import-images', args, (response)=>{

					});
					break;
				case 'Variations':
					io.socket.post('/import-variations', args, (response)=>{

					});
					break;
				default:
					break;
			}
		}

	}

	function addDivReport() {
		document.querySelector('#divreport').innerHTML = '';
		let html = `
			<div id="report" class="container is-fluid is-hidden"> 
				<br>
				<h6 class="title is-6">Espera un momento....</h6>
				<hr>
				<div id="loading-block" class="notification is-hidden">
					<i class="fas fa-sync fa-spin"></i>
					Estamos sincronizando el catalogo...
					<progress class="progress is-small is-primary" max="100">15%</progress>
				</div>
				<div id="success-block" class="notification is-primary is-hidden">
					Se han procesado un total <span id="items">0</span> de registros.
				</div>
				<div id="error-block" class="notification is-danger is-hidden">
					<p>Hemos identificado <span id="errors">0</span> error(es).</p>
					<br>
					<div class="container is-fluid">
						<ol id="error-list">
						</ol>
					</div>
				</div>
			</div>`;
		document.querySelector('#divreport').innerHTML = html;
		document.querySelector('#items').innerHTML = 0;
		document.querySelector('#errors').innerHTML = 0;
		document.querySelector('#error-list').innerHTML = '';
	}

	const fileInput = document.querySelector('#file-loader input[type=file]');
	fileInput.onchange = () => {
		if (fileInput.files.length > 0) {
			const fileName = document.querySelector('#file-loader .file-name');
			fileName.textContent = fileInput.files[0].name;
		}
	};

	live('select[name="importType"]','change', e=>{
		let field = document.querySelector('#fieldDiscount');
		let color = document.querySelector('#fieldColor');
		let value =  e.target.value;
		value === 'Variations' ? removeClass(field, 'is-hidden') : addClass(field, 'is-hidden');
		value === 'Product' ? removeClass(color, 'is-hidden') : addClass(color, 'is-hidden');
	});

	live('#process','click',e=>{
		let box = document.querySelector('.box').parentNode;
		const entity = document.querySelector('select[name="entity"]').value;
		const file = document.querySelector('input[name="file"]').value;
		const seller = '<%- seller %>';
		if (file && entity) {
			addClass(box,'is-hidden');
			document.querySelector('.loading').innerHTML='<br><p>Por favor espera, estamos procesando el archivo. Tomar谩 unos minutos.</p><br><progress class="progress is-small is-primary" max="100">15%</progress>';
			document.querySelector('#divreport').innerHTML = '';
		} else {
			document.querySelector('#error-from-cms').innerHTML = 'Debes Seleccionar un tipo de importaci贸n o agregar el archivo excel';
			removeClass(document.querySelector('#error-from-cms'), 'is-hidden');
			setTimeout(() =>{
				document.querySelector('#error-from-cms').innerHTML = '';
				addClass(document.querySelector('#error-from-cms'), 'is-hidden');
			}, 5000)
		}
  });

	live('#process-from-provider','click',e=>{
		e.preventDefault();
		let box = document.querySelector('.box').parentNode;
		const importType = document.querySelector('select[name="importType"]').value;
    const discount = document.querySelector('input[name="discount"]').checked;
		const asColor = document.querySelector('input[name="color"]').checked;
		const channel = document.querySelector('input[name="channel"]').value;
		const apiUrl = document.querySelector('input[name="apiUrl"]').value;
		const pk = document.querySelector('input[name="pk"]').value;
		const sk = document.querySelector('input[name="sk"]').value;
		const version = document.querySelector('input[name="version"]').value;
		const seller = '<%- seller %>';
		addClass(box,'is-hidden');
		addDivReport();
		document.querySelector('.loading').innerHTML='<br><p>Por favor espera, estamos procesando la importaci贸n. Tomar谩 unos minutos.</p><br><progress class="progress is-small is-primary" max="100">15%</progress>';
		io.socket.post('/import',{importType, discount, asColor, channel, apiUrl, pk, sk, version, seller}, (resData, jwRes) =>{
			if(jwRes.statusCode==200){
				removeClass(box,'is-hidden');
				document.querySelector('.loading').innerHTML='';
				
				if(resData.error){
					document.querySelector('#error-from-cms').innerHTML = resData.error;
					removeClass(document.querySelector('#error-from-cms'), 'is-hidden');
				}

				responseIntegration(resData.credentials, seller, resData.importType, resData.pageSize, resData.discount, resData.asColor, resData.pagination)
			}
		});
	});

	live('select[name="entity"]','change', e =>{
		let elm = document.querySelector('#file');
		let container = document.querySelector('#container-info');
		let value = e.target.value;
		if(value === 'ProductImage'){
			addClass(container, 'is-hidden');
			elm.setAttribute('accept','image/*');
			elm.setAttribute('multiple','multiple');
			document.querySelector('span .file-label').innerHTML='Imagenes a Procesar'
			document.querySelector('.file-name').innerHTML='Cargar Varias Imagenes'
		}else{
			container.innerHTML = `
			Puedes Descargar la plantilla de Excel <strong><a href="#" id='btnDownload' entity=${value}>Descargar</a></strong>`;
			removeClass(container, 'is-hidden');
			elm.setAttribute('accept','.xlsx, .xls');
			elm.removeAttribute('multiple');
			document.querySelector('span .file-label').innerHTML='Archivo Excel'
			document.querySelector('.file-name').innerHTML='Cargar Archivo a procesar'
		}
	})

	live('#btnDownload','click', e =>{
		e.preventDefault();
		let entity = e.target.getAttribute('entity');
		let name = entity === 'Product' ? 'Productos' : entity === 'ProductVariation' ? 'Variaciones de Producto' : 
		entity === 'ProductImage' ? 'Imagenes de Producto' : 'Descuentos';
		io.socket.post('/downloadtemplate', {entity}, (resData, jwRes) =>{
			if(jwRes.statusCode==200){
				saveAs(new Blob([resData],{type:"application/octet-stream"}), `Template para ${name}.xlsx`);
			}
		});
	})

	document.addEventListener("DOMContentLoaded", function(event) {
    let tabsWithContent = (function () {
  		let tabs = document.querySelectorAll('.tabs li');
  		let tabsContent = document.querySelectorAll('.tab-content');

			let deactvateAllTabs = function () {
				tabs.forEach(function (tab) {
					tab.classList.remove('is-active');
				});
			};

			let hideTabsContent = function () {
				tabsContent.forEach(function (tabContent) {
					tabContent.classList.remove('is-active');
				});
			};

			let activateTabsContent = function (tab) {
				tabsContent[getIndex(tab)].classList.add('is-active');
			};

			let getIndex = function (el) {
				return [...el.parentElement.children].indexOf(el);
			};

			tabs.forEach(function (tab) {
				tab.addEventListener('click', function () {
					deactvateAllTabs();
					hideTabsContent();
					tab.classList.add('is-active');
					activateTabsContent(tab);
				});
			})
			tabs[0].click();
		})();
	});
</script>
