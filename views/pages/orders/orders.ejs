<script src="https://cdnjs.cloudflare.com/ajax/libs/pubsub-js/1.9.0/pubsub.min.js" integrity="sha512-uBtVltNBUq45IPe/JWfSr1t6bWcpivYh/EJfQxZQ8jVqI6olmUfDrOscYHSoZnmJJpHe1cWZTupZ1SFgQaLyQw==" crossorigin="anonymous"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma-checkradio@1.1.1/dist/css/bulma-checkradio.min.css">

<% let printed = []; let flag = false; %>
<div class="container">
      <div class="notification is-light is-hidden" id="notifi">
      </div>
      <div class="pageloader is-active"><span class="title">Buscando Ordenes ...</span></div>
      <p style="text-align: right;margin-right: 10px;">
        <a href="/order/report" class="button is-primary is-size-7"><i class='bx bx-download is-size-5'></i>&nbsp;&nbsp;Descargar Pedidos</a>
      </p>
      <div class="table-container">
        <table class="table is-hoverable is-size-7" id="orders-table">
            <thead>
            <tr>
              <th scope="col">
                <div class="field" id="selectedall">
                  <input class="is-checkradio is-small is-info" id="checkboxselectall" type="checkbox" name="checkboxselect">
                  <label for="checkboxselectall"></label>
                </div>
              </th>
              <th scope="col">Id</th>
              <th scope="col">Canal</th>
              <th scope="col">Referencia</th>
              <th scope="col">Manifested</th>
              <th scope="col">Medio de Pago</th>
              <th scope="col">Cliente</th>
              <th scope="col">Estado</th>
              <th scope="col">Total</th>
              <th scope="col">Fecha</th>
              <%if(req.session.user.rights.name=='superadmin' || req.session.user.rights.name=='admin'){%>
                <th scope="col">Seller</th>
              <%}%>
              <th scope="col">Opciones</th>
            </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
      </div>
      <script>
        let cont = 0;
        let ordersSelected = [];
        let checkboxChecked = [];
        let datatable = new simpleDatatables.DataTable('#orders-table',{
          searchable:true,
          sortable:true,
          paging:true,
          perPageSelect:[5,10,20,30,50],
          perPage:50,
          labels: {
            placeholder: "Buscar...",
            perPage: "{select} registros por página",
            noRows: "No se encontraron datos",
            info: "Mostrando {start} a {end} de {rows} registros",
          }
        });

        datatable.on('datatable.page', function(page) {
          const divSelectedAll = document.querySelector('#selectedall');
          if (hasClass(divSelectedAll, 'is-hidden')) {
            removeClass(divSelectedAll,'is-hidden');
            document.querySelector('#checkboxselectall').checked = false;
          }
          checkCheckbox(page);
        });

        datatable.on('datatable.update', function() {
          for (let i = datatable.totalPages; i >= 1; i--) {
            datatable.page(i);
            let checkboxs = document.querySelectorAll('.is-checkradio');
            checkboxs.forEach(check =>{
              if (hasClass(check,'has-background-color')) {
                checkboxChecked.map(item => {
                  if (item.element.id == check.id) {
                    item.page = i;
                    return item;
                  }
                });
              };
            });
          }
        });

        let pages = parseInt(<%= pages; %>);
    
        let ordersQuery = (page) => {
          if(page>pages){
            return;
          }else{
            io.socket.get('/ordersquery/'+page, p =>{
              let loader = document.querySelector('.pageloader');
              if(hasClass(loader,'is-active')){
                removeClass(loader,'is-active');
              }
              datatable.rows().add(p);
              const currentPage = datatable.currentPage;
              checkCheckbox(currentPage);
              ordersQuery(page+=1);
            });
          }
        };
        
        if(pages>0){
          ordersQuery(1);
        }else{
          let loader = document.querySelector('.pageloader');
          if(hasClass(loader,'is-active')){removeClass(loader,'is-active');}
        }

        live('.is-checkradio','click',e=>{
          let element = e.target;
          const selectall = e.target.id;
          const page = datatable.currentPage;
          const divDatatable = document.querySelector('.dataTable-container');
          const spanNumber = document.querySelector('#numberselected');
          const divOptions = document.querySelector('#optionEdit');
          const divSelectedAll = document.querySelector('#selectedall');
          if (selectall === 'checkboxselectall') {
            addClass(divSelectedAll,'is-hidden');
            let checkboxs = document.querySelectorAll('.is-checkradio');
            checkboxs.forEach(check =>{
              if (check.id !== 'checkboxselectall') {
                let orderId = check.getAttribute('data-product');
                if(!ordersSelected.includes(orderId) && !checkboxChecked.some(item => item.element.id === check.id)){
                  ordersSelected.push(orderId);
                  checkboxChecked.push({element: check, page});
                  cont++;
                  check.checked = true;
                  addClass(check,'has-background-color');
                }
              }
            });
          } else {
            let orderId = element.getAttribute('data-product');
            if (hasClass(element,'has-background-color')) {
              cont--;
              ordersSelected = ordersSelected.filter(item => item !== orderId);
              checkboxChecked = checkboxChecked.filter(item => item.element.id !== element.id);
              removeClass(element,'has-background-color');
            } else {
              cont++;
              ordersSelected.push(orderId);
              checkboxChecked.push({element, page});
              addClass(element,'has-background-color');
            }
          }
          if (checkboxChecked.length > 0 && !spanNumber) {
            let div = document.createElement('div');
            div.id = "optionEdit";
            div.innerHTML = `<br/><div class="field has-addons" style="margin-left:4px">
              <p class="control">
                <button id="btnSelected" class="button is-small">
                  <span class="icon is-small has-text-info">
                    <i class='bx bxs-minus-square bx-sm'></i>
                  </span>
                  <span id="numberselected" style="margin-left:10px">${cont > 0 ? cont : 1} Seleccionados</span>
                </button>
              </p>
              <p class="control">
                <button id="generateManifest" class="button is-small">
                  Generar Manifiesto
                </button>
              </p>
              <p class="control">
                <button id="generateGuia" class="button is-small">
                  Generar Guias
                </button>
              </p>
            </div>`;
            divDatatable.prepend(div);
          } else if (cont != 0) {
            spanNumber.textContent = `${cont} Seleccionados`;
          } else if (cont === 0) {
            divOptions.remove();
          }
        });
        
        live('#btnSelected','click',e=> {
          cleanCheckbox();
        });

        live('#generateManifest','click', e =>{
          e.preventDefault();
          addClass(e.target, 'is-loading');
          let notifi = document.querySelector('#notifi');   
          io.socket.post('/generatemanifest',{ordersSelected}, resData =>{
            removeClass(e.target, 'is-loading');
            if (resData.manifest) {
              if(hasClass(notifi,'is-hidden')){
                removeClass(notifi,'is-hidden');
                addClass(notifi,'is-success');
              }
              notifi.innerHTML = resData.manifest ? 'Se genero correctament el manifiesto' : 'Error al procesar el manifiesto';
              cleanCheckbox()
              window.location = '/manifest'
            } else {
              if(hasClass(notifi,'is-hidden')){
                removeClass(notifi,'is-hidden');
                addClass(notifi,'is-danger');
              }
              notifi.innerHTML = resData.error ? resData.error : 'Error al procesar el manifiesto';
            }
          });

          setTimeout(function() {
            if(!hasClass(notifi,'is-hidden')){
              addClass(notifi,'is-hidden');
              removeClass(notifi,'is-danger');
              removeClass(notifi,'is-success');
            }
          }, 5000);
        });

        live('#generateGuia','click', e =>{
          e.preventDefault();
          addClass(e.target, 'is-loading');
          let notifi = document.querySelector('#notifi');
          io.socket.post('/multipleguides',{numbers:'',startDate:null,endDate:null,ordersSelected}, resData =>{
            removeClass(e.target, 'is-loading');
            if (resData.guia) {
              const fileWindow = window.open();
              fileWindow.document.write(
                `<title>Visualisación</title>
                <div class="box">
                  <p class="container has-text-centered">
                    <embed src="data:application/pdf;base64,${resData.guia}" width="100%" height="500">
                  </p>
                </div>`
              );
              fileWindow.focus();
              fileWindow.document.close();
              cleanCheckbox()
            } else {
              if(hasClass(notifi,'is-hidden')){
                removeClass(notifi,'is-hidden');
                addClass(notifi,'is-danger');
              }
              notifi.innerHTML = resData.error ? resData.error : 'Error al procesar guias';
            }
          });

          setTimeout(function() {
            if(!hasClass(notifi,'is-hidden')){
              addClass(notifi,'is-hidden');
              removeClass(notifi,'is-danger');
              removeClass(notifi,'is-success');
            }
          }, 5000);
        });

        function cleanCheckbox() {
          const pages = []
          cont = 0;
          const divSelectedAll = document.querySelector('#selectedall');
          const divOptions = document.querySelector('#optionEdit');
          checkboxChecked.forEach(check =>{
            if (!pages.includes(check.page)) {
              pages.push(check.page)
            }
          });
          for (const page of pages) {
            datatable.page(parseInt(page));
            const checkbox = checkboxChecked.filter(item => item.page == page);
            checkbox.forEach(check =>{
              const resultCheck = document.querySelector(`#${check.element.id}`);
              if (resultCheck) {
                resultCheck.checked = false;
                removeClass(resultCheck,'has-background-color');
              }
            });
          }
          if (divOptions) {
            divOptions.remove();
          }
          document.querySelector('#checkboxselectall').checked = false;
          removeClass(divSelectedAll,'is-hidden');
          checkboxChecked = [];
          ordersSelected = [];
        }

        function checkCheckbox(page) {
          const resultCheckbox = checkboxChecked.filter(item => item.page == page);
          resultCheckbox.forEach(check =>{
            const resultCheck = document.querySelector(`#${check.element.id}`);
            resultCheck.checked = true;
            addClass(resultCheck,'has-background-color');
          });
        }
      </script>
</div>