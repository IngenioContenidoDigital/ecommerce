<script src='https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.27.0/moment-with-locales.min.js'></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma-checkradio@1.1.1/dist/css/bulma-checkradio.min.css">
<link href='https://cdn.jsdelivr.net/npm/bulma-tooltip@3.0.2/dist/css/bulma-tooltip.min.css' rel='stylesheet'>

<div class="container">
<div class="notification is-hidden" id="notificationmessage">
</div>
<% if (error != undefined || error != null) { %>
  <div class="notification is-danger is-light" id="error">
    <%= error %>
  </div>
<% } %>
<div class="pageloader is-active"><span class="title">Buscando Productos ...</span></div>
<% if (!totalproducts  || totalproducts.length === 0) { %>
  <script>
    let loader = document.querySelector('.pageloader');
    removeClass(loader,'is-active');
  </script>
<% }%>
  <% if(typeof helper!='undefined' && helper !=null){%>
    <%- partial('../../partials/help.ejs') %>
  <% } %>
  <p style="text-align: right;font-size: 20px; margin-right: 5px;">
    <a href="/product/create" class="button is-primary is-size-7">Crear Producto</a>
  </p>
  <div class="tabs is-toggle is-small is-centered tabs-dropdown-filter">
    <ul>
      <li class="is-active filters"><a filter='all'>Todos</a></li>
      <li class="filters"><a filter='active'>Activos</a></li>
      <li class="filters"><a filter='inactive'>Inactivos</a></li>
      <li class="filters"><a filter='image'>Imagen faltante</a></li>
      <li class="filters"><a filter='stock'>Agotado</a></li>
      <li class="filters"><a filter='content' id="selectContent">Mala Calidad</a></li>
      <%if(integrations.length > 0){%>
        <li class="dropdown" id="dropdownFilter">
          <div class="dropdown-trigger">
            <a aria-haspopup="true" aria-controls="dropdown-menu">
              <span>Integraciones</span>
              <span class="icon is-small">
                <i class='bx bx-chevron-down bx-xs' aria-hidden="true"></i>
              </span>
            </a>
          </div>
          <div class="dropdown-menu" id="dropdown-menu" role="menu">
            <div class="dropdown-content">
              <% integrations.forEach(function(integration){ %>
                <div class="dropdown-item-filter filters">
                  <span filter='integration-<%= integration.id %>'><%= integration.name %></span>
                </div>
              <%})%>
            </div>
          </div>
        </li>
      <%}%>
    </ul>
  </div>
  <div class="table-container">
      <table class="table is-hoverable is-size-7" id="products-table">
          <thead>
          <tr>
            <th scope="col">
              <div class="field" id="selectedall">
                <input class="is-checkradio is-small is-info" id="checkboxselectall" type="checkbox" name="checkboxselect">
                <label for="checkboxselectall"></label>
              </div>
            </th>
            <th scope="col">Nombre</th>
            <th scope="col">SKU</th>
            <th scope="col">Marca</th>
            <th scope="col">Precio</th>
            <th scope="col">Color</th>
            <th scope="col">Categoría Principal</th>
            <th scope="col">Inventario</th>
            <%if(columnActive){%>
              <th scope="col">Activo</th>
            <%}%>
            <th scope="col">Opciones</th>
            <%if(req.session.user.rights.name=='superadmin' || req.session.user.rights.name=='admin'){%>
              <th scope="col">Seller</th>
            <%}%>
            <th scope="col">Publicaciones</th>
          </tr>
          </thead>
          <tbody>
            
          </tbody>
      </table>
  </div>
  <div id="modal-image" class="modal">
    <div class="modal-background"></div>
    <div class="modal-card">
      <header class="modal-card-head">
        <p class="modal-card-title is-size-7 has-text-weight-bold"></p>
        <button class="delete" aria-label="close"></button>
      </header>
      <section class="modal-card-body">
        <p class="modal-reference is-size-7 has-text-weight-bold"></p>
        <p class="image">
          <img loading="lazy" src="" />
        </p>
      </section>
    </div>
  </div>
  <div id="modal-address" class="modal">
    <div class="modal-background"></div>
    <div class="modal-card">
      <section class="modal-card-body">
        <div style="margin: 5px 5px; " class="field is-pulled-right">
          <div class="control">
            <div class="select is-small is-danger">
              <select name="mainCategory" id="mainCategory">
                <option level="0">Categoría Principal</option>
              </select>
            </div>
          </div>
        </div>
        <article class="panel is-primary is-size-7">
          <p class="panel-heading">
            Categorías
          </p>
            <ul>
              <li>
                <a style="display:none;" class="panel-block is-active" category="<%= root.id %>" level="<%= root.level %>">
                  <input type="radio" name="root" id="root" value="<%= root.id %>" />&nbsp;
                  <span class="panel-icon"><i class="bx bx-book-open" aria-hidden="true"></i></span>
                  <%= root.name %>
                </a>
              </li>
            </ul>
        </article>
        <div class="control buttons is-right">
          <button id="updateProducts" class="button is-primary is-small"><i class="bx bxs-pencil"></i>&nbsp;Modificar Productos</button>
        </div>
      </section>
    </div>
    <button class="modal-close is-large" aria-label="close"></button>
  </div>
  <div id="modal-details" class="modal">
    <div class="modal-background"></div>
    <div class="modal-card">
      <section class="modal-card-body">
        <div class="box">
          <h6 class="title is-6">Errores de contenido</h4>
          <hr>
          <div class="columns is-gapless">
            <div class="column content">
              <div class="column content">
                <ol id="detailsContent"></ol>
              </div>
            </div>
          </div>
          <h6 class="title is-6">Errores de integraciones</h4>
          <hr>
          <div class="columns is-gapless">
            <div class="column content">
              <div class="column content">
                <ol id="errorIntegrations"></ol>
              </div>
            </div>
          </div>
          <div class="control buttons is-right" id="footer-details">
          </div>
        </div>
      </section>
    </div>
    <button class="modal-close is-large" aria-label="close"></button>
  </div>
  <script>
    let cont = 0;
    let productsSelected = [];
    let checkboxChecked = [];
    let datatable = new simpleDatatables.DataTable('#products-table',{
      searchable:true,
      sortable:true,
      paging:true,
      perPageSelect:[5,10,20,30,50],
      perPage:50,
      labels: {
        placeholder: "Buscar...",
        perPage: "{select} registros por página",
        noRows: "No se encontraron datos",
        info: "Mostrando {start} a {end} de {rows} registros",
      }
    });
    
    live('.dropdown', 'click', function(event){
      let dropdown = document.querySelector('#dropdownFilter');
      dropdown.classList.toggle('is-active');
    });

    live('.state', 'click', function(){ 
        var elm = this;
        var id = this.getAttribute('product');
        var seller = this.getAttribute('seller');
        var status = null;
        if (hasClass(elm,'bx-check-circle')){status = false;}else{status = true;}

        io.socket.put('/products/'+id,{active:status,seller:seller},function(resData, jwr){
          if(resData){
            removeClass(elm, 'bx-x-circle');
            addClass(elm,'bx-check-circle');
          }else{
            removeClass(elm, 'bx-check-circle');
            addClass(elm,'bx-x-circle');
          }
        });
    });

    live('.showDetails', 'click', function(){
      let id = this.getAttribute('product');
      let ol = document.querySelector('#detailsContent');
      let errors = document.querySelector('#errorIntegrations');
      let footer = document.querySelector('#footer-details');
      io.socket.get('/getcover/'+id,resData=>{
        if(resData){
          let details = resData.details.split(' | ');
          let html = '';
          let htmlErrors = '';
          for (const detail of details) {
            if (detail) {
              html += `<li class="is-uppercase">
                  <article class="message is-danger is-small">
                    <div class="message-body">
                      ${detail}
                    </div>
                  </article>
                </li>`;
            }
          }
          for(let e of resData.channelErrors){
            htmlErrors += `<li class="is-uppercase">
              <article class="message is-danger is-small">
                <div class="message-body">
                  Referencia: ${e.reference} <br>Integración: ${e.integration} <br>Errores: ${e.reason}
                </div>
              </article>
            </li>`;
          }
          ol.innerHTML = html;
          errors.innerHTML = htmlErrors;
          footer.innerHTML = `<a href="/product/edit/` + resData.id + `" target="_blank" class="button is-primary is-small"><i class="bx bxs-pencil"></i>&nbsp;Corregir Contenido</a>`;
          let modal = document.querySelector('#modal-details');
          addClass(modal,'is-active');
        }
      });
    });
    
    live('.product-image','click',(e)=>{
      let id = e.target.getAttribute('data-product');
      io.socket.get('/getcover/'+id,resData=>{
        if(resData){
          let modal = document.querySelector('#modal-image');
          modal.querySelector('.modal-card-title').innerHTML = resData.name.toUpperCase();
          modal.querySelector('.modal-reference').innerHTML = 'REF:&nbsp;'+resData.reference.toUpperCase();
          modal.querySelector('.image > img').setAttribute('src',resData.image);
          addClass(modal,'is-active');
        }
      });
    });
    
    live('.is-checkradio','click',e=>{
      let element = e.target;
      const selectall = e.target.id;
      const page = datatable.currentPage;
      const divDatatable = document.querySelector('.dataTable-container');
      const spanNumber = document.querySelector('#numberselected');
      const divOptions = document.querySelector('#optionEdit');
      const divSelectedAll = document.querySelector('#selectedall');
      if (selectall === 'checkboxselectall') {
        addClass(divSelectedAll,'is-hidden');
        let checkboxs = document.querySelectorAll('.is-checkradio');
        checkboxs.forEach(check =>{
          if (check.id !== 'checkboxselectall') {
            let productId = check.getAttribute('data-product');
            if(!productsSelected.includes(productId) && !checkboxChecked.some(item => item.element.id === check.id)){
              productsSelected.push(productId);
              checkboxChecked.push({element: check, page});
              cont++;
              check.checked = true;
              addClass(check,'has-background-color');
            }
          }
        });
      } else {
        let productId = element.getAttribute('data-product');
        if (hasClass(element,'has-background-color')) {
          cont--;
          productsSelected = productsSelected.filter(item => item !== productId);
          checkboxChecked = checkboxChecked.filter(item => item.element.id !== element.id);
          removeClass(element,'has-background-color');
        } else {
          cont++;
          productsSelected.push(productId);
          checkboxChecked.push({element, page});
          addClass(element,'has-background-color');
        }
      }
      if (checkboxChecked.length > 0 && !spanNumber) {
        let div = document.createElement('div');
        div.id = "optionEdit";
        div.innerHTML = `<br/><div class="field has-addons" style="margin-left:4px">
          <p class="control">
            <button id="btnSelected" class="button is-small">
              <span class="icon is-small has-text-info">
                <i class='bx bxs-minus-square bx-sm'></i>
              </span>
              <span id="numberselected" style="margin-left:10px">${cont > 0 ? cont : 1} Seleccionados</span>
            </button>
          </p>
          <p class="control">
            <button id="editCategory" class="button is-small">
              <span>Editar Categoría</span>
            </button>
          </p>
        </div>`;
        divDatatable.prepend(div);
      } else if (cont != 0) {
        spanNumber.textContent = `${cont} Seleccionados`;
      } else if (cont === 0) {
        divOptions.remove();
      }
    });

    live('#editCategory','click',e=> {
      childTree(document.querySelectorAll('a.panel-block'));
      let modal = document.querySelector('#modal-address');
      addClass(modal,'is-active');
    });

    live('#btnSelected','click',e=> {
      cleanCheckbox();
    });

    live('.modal-background, .delete, .modal-close','click',e=>{
      let modals = document.querySelectorAll('.modal');
      modals.forEach(modal => {
        removeClass(modal,'is-active');
      });
    });

    live('.cat_name','click',(e)=>{
      let element = e.target || e.srcElement;
      let group = element.parentNode.parentNode.querySelector('ul');
      let icon = element.parentNode.querySelector('i');
      if(hasClass(group,'is-hidden')){
        removeClass(group,'is-hidden');
        addClass(icon,'bx-book-open');
        removeClass(icon,'bxs-book-add');
      }else{
        addClass(group,'is-hidden');
        removeClass(icon,'bx-book-open');
        addClass(icon,'bxs-book-add');
      }
    });

    live('input[name="categories[]"]','click',function(){
      let cat = this;
      let catlevel = cat.parentNode.getAttribute('level');
      let catname = cat.parentElement.querySelector('.cat_name');
      let select = document.querySelector('#mainCategory');
      if (cat.checked){
        let op = document.createElement('option');
        op.value=cat.value;
        op.innerHTML=catname.innerHTML;
        op.setAttribute('level',catlevel);
        select.appendChild(op);
      }else{
        let op = select.querySelector('option[value="'+cat.value+'"]');
        select.removeChild(op);
      }
      let lowest = select.options[0];
      for(let o=0; o<select.options.length; o++){
        if(parseInt(lowest.getAttribute('level'))<=parseInt(select.options[o].getAttribute('level'))){
          lowest = select.options[o];
        }
      }
      for(let s=0; s<select.options.length; s++){
        if(select.options[s].value==lowest.value){
          select.options[s].selected=true;
        }
      }
    });

    live('#updateProducts','click', e =>{
      e.preventDefault();
      let categories = validateCategories(document.getElementsByName('categories[]'));
      let lcat = CategoriesJSON(document.getElementsByName('categories[]'));
      let inputCate = document.getElementsByName('categories[]');
      let modal = document.querySelector('#modal-address');
      const cats = document.querySelectorAll('.cat_name');
      const select = document.querySelector('#mainCategory');
      if(categories){
        io.socket.post('/updatemultiple/products',{productsSelected,mainCategory:document.querySelector('select[name="mainCategory"]').value, categories:lcat}, resData => {
          removeClass(modal,'is-active');
          if(resData.error){
            const el = document.getElementById('notificationmessage');
            el.textContent = resData.error;
            addClass(el,'is-danger');
            removeClass(el,'is-hidden');
            setTimeout(function() {
              addClass(el,'is-hidden');
              removeClass(el,'is-danger');
            }, 4000);
          } else {
            window.location.href='/products/'+resData.seller;
          };
        });
      }
    });
  
    live('.filters','click', e =>{
      e.preventDefault();
      let filter = e.target.getAttribute('filter');
      const filters = document.querySelectorAll('.filters');
      let loader = document.querySelector('.pageloader');
      filters.forEach(li =>{
        removeClass(li, 'is-active');
      });
      addClass(e.target.parentElement,'is-active');
      addClass(loader,'is-active');
      datatable.destroy();
      datatable = new simpleDatatables.DataTable('#products-table', {
        searchable:true,
        sortable:true,
        paging:true,
        perPageSelect:[5,10,20,30,50],
        perPage:50,
        labels: {
          placeholder: "Buscar...",
          perPage: "{select} registros por página",
          noRows: "No se encontraron datos",
          info: "Mostrando {start} a {end} de {rows} registros",
        }
      });
      catalogQuery(1, filter);
    });

    datatable.on('datatable.page', function(page) {
      const divSelectedAll = document.querySelector('#selectedall');
      if (hasClass(divSelectedAll, 'is-hidden')) {
        removeClass(divSelectedAll,'is-hidden');
        document.querySelector('#checkboxselectall').checked = false;
      }
      checkCheckbox(page);
    });

    datatable.on('datatable.update', function() {
      for (let i = datatable.totalPages; i >= 1; i--) {
        datatable.page(i);
        let checkboxs = document.querySelectorAll('.is-checkradio');
        checkboxs.forEach(check =>{
          if (hasClass(check,'has-background-color')) {
            checkboxChecked.map(item => {
              if (item.element.id == check.id) {
                item.page = i;
                return item;
              }
            });
          };
        });
      }
    });

    function cleanCheckbox() {
      const pages = []
      cont = 0;
      const divSelectedAll = document.querySelector('#selectedall');
      const divOptions = document.querySelector('#optionEdit');
      checkboxChecked.forEach(check =>{
        if (!pages.includes(check.page)) {
          pages.push(check.page)
        }
      });
      for (const page of pages) {
        datatable.page(parseInt(page));
        const checkbox = checkboxChecked.filter(item => item.page == page);
        checkbox.forEach(check =>{
          const resultCheck = document.querySelector(`#${check.element.id}`);
          if (resultCheck) {
            resultCheck.checked = false;
            removeClass(resultCheck,'has-background-color');
          }
        });
      }
      if (divOptions) {
        divOptions.remove();
      }
      document.querySelector('#checkboxselectall').checked = false;
      removeClass(divSelectedAll,'is-hidden');
      checkboxChecked = [];
      productsSelected = [];
    }

    let childTree = (elm) => {
      elm.forEach((child) =>{
        if(!hasClass(child,'visited')){
          let opened = false;
          io.socket.get('/categories/'+child.getAttribute('category'),function(resData){
              var d = document.createElement('ul');
              resData.forEach(function(son){
                let ca = document.createElement('li');
                ca.style.paddingLeft = 5*son.level+'px';
                if(son.id==document.querySelector('#root').value){
                  ca.innerHTML = '<a class="panel-block is-active" category="'+son.id+'" level="'+son.level+'"><input type="checkbox" name="categories[]" value="'+son.id+'" checked/>&nbsp;<span class="panel-icon"><i class="bx bx-book-open" aria-hidden="true"></i></span><span class="cat_name is-capitalized">'+son.name+'</span></a>';
                } else {
                  ca.innerHTML = '<a class="panel-block is-active" category="'+son.id+'" level="'+son.level+'"><input type="checkbox" name="categories[]" value="'+son.id+'" />&nbsp;<span class="panel-icon"><i class="bx bxs-book-add" aria-hidden="true"></i></span><span class="cat_name is-capitalized">'+son.name+'</span></a>';
                  if(son.level>2 && !opened){addClass(d,'is-hidden');}
                }
                d.appendChild(ca);
              });
              insertAfter(d,child);
              addClass(child,'visited');
              childTree(d.querySelectorAll('a.panel-block'));
          });
        }
      })
    };

    let pages = parseInt(<%= pages; %>);
    <% if(seller!==undefined && seller!==null){%>let seller = '<%= seller%>';<%}else{%>let seller = null;<%} %>;
    
    let catalogQuery = (page, filter) => {
      if(page>pages){
        return;
      }else{
        let route = `/catalogquery/${page}/${filter}`;
        if(seller!==null){route+='/'+seller;}
        io.socket.get(route, p =>{
          let loader = document.querySelector('.pageloader');
          if(hasClass(loader,'is-active')){
            removeClass(loader,'is-active');
          }
          if (p.length > 0) {
            datatable.rows().add(p);
          }
          const currentPage = datatable.currentPage;
          checkCheckbox(currentPage);
          catalogQuery(page+=1,filter);
        });
      }
    };
    
    if (window.location.search.includes('result=errors')) {
      let liContent = document.querySelector('#selectContent');
      const filters = document.querySelectorAll('.filters');
      let loader = document.querySelector('.pageloader');
      filters.forEach(li =>{
        removeClass(li, 'is-active');
      });
      addClass(liContent.parentElement,'is-active');
      addClass(loader,'is-active');
      catalogQuery(1, 'content');
    } else if(window.location.search.includes('result=corrects&integration')){
      let integrationId = window.location.search.split('=')[2];
      let liContent = document.querySelector('#dropdownFilter');
      const filters = document.querySelectorAll('.filters');
      let loader = document.querySelector('.pageloader');
      filters.forEach(li =>{
        removeClass(li, 'is-active');
      });
      addClass(liContent,'is-active');
      addClass(loader,'is-active');
      catalogQuery(1, `integration-${integrationId}`);
    }else {
      catalogQuery(1, 'all');
    }

    function checkCheckbox(page) {
      const resultCheckbox = checkboxChecked.filter(item => item.page == page);
      resultCheckbox.forEach(check =>{
        const resultCheck = document.querySelector(`#${check.element.id}`);
        if (resultCheck) {
          resultCheck.checked = true;
          addClass(resultCheck,'has-background-color');
        }
      });
    }
  </script>
</div>